#!/usr/bin/env python3
"""
Cave Story Exporter
Quick command-line tool to export stories as markdown files.
"""

import requests
import json
import sys
from datetime import datetime

BASE_URL = "http://localhost:8000"

def get_scenes():
    """Get all available scenes"""
    response = requests.get(f"{BASE_URL}/scenes/")
    if response.status_code == 200:
        return response.json()
    else:
        print(f"‚ùå Error getting scenes: {response.text}")
        return []

def export_story(scene_id, filename=None):
    """Export a story as markdown"""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"cave_story_{timestamp}.md"
    
    print(f"üìù Exporting story to {filename}...")
    
    # Get scene details
    scene_response = requests.get(f"{BASE_URL}/scenes/{scene_id}")
    if scene_response.status_code != 200:
        print("‚ùå Error getting scene details")
        return None
    
    scene = scene_response.json()
    
    # Get all interactions
    interactions_response = requests.get(f"{BASE_URL}/scenes/{scene_id}/interactions/")
    if interactions_response.status_code != 200:
        print("‚ùå Error getting interactions")
        return None
    
    interactions = interactions_response.json()
    
    # Get scene summary
    summary_response = requests.post(f"{BASE_URL}/scenes/{scene_id}/summarize")
    summary = None
    if summary_response.status_code == 200:
        summary = summary_response.json()
    
    # Create markdown content
    markdown_content = f"""# {scene['title']}

## Scene Details
- **Environment**: {scene['environment']}
- **Context**: {scene['context']}
- **Weather**: {scene['weather'] or 'Not specified'}
- **Time of Day**: {scene['time_of_day'] or 'Not specified'}
- **Mood**: {scene['mood'] or 'Not specified'}

## Characters
"""
    
    # Add character details
    for char in scene.get('characters', []):
        markdown_content += f"""
### {char['name']}
- **Personality**: {char['personality']}
- **Background**: {char['background']}
- **Goals**: {char.get('goals', 'Not specified')}
- **Fears**: {char.get('fears', 'Not specified')}
"""
    
    # Add summary if available
    if summary and not summary.get('error'):
        markdown_content += f"""
## Scene Summary
{summary.get('summary', 'No summary available')}

### Key Events
"""
        for event in summary.get('key_events', []):
            markdown_content += f"- {event}\n"
        
        markdown_content += "\n### Character Developments\n"
        for char, development in summary.get('character_developments', {}).items():
            markdown_content += f"- **{char}**: {development}\n"
        
        markdown_content += f"\n### Plot Advancement\n{summary.get('plot_advancement', 'No plot advancement noted')}\n"
    
    # Add all interactions
    markdown_content += f"""
## Complete Dialogue

*Total interactions: {len(interactions)}*

"""
    
    for i, interaction in enumerate(interactions, 1):
        markdown_content += f"""
### Interaction {i}
**{interaction['character_name']}** ({interaction['emotional_state']}): {interaction['content']}

"""
    
    # Add metadata
    markdown_content += f"""
---
*Generated by Cave - AI-Powered Interactive Storytelling*
*Exported on: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}*
*Total interactions: {len(interactions)}*
"""
    
    # Write to file
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        print(f"‚úÖ Story exported successfully to {filename}")
        return filename
    except Exception as e:
        print(f"‚ùå Error writing file: {e}")
        return None

def main():
    """Main function"""
    print("üé≠ Cave Story Exporter")
    print("=" * 30)
    
    # Check if server is running
    try:
        response = requests.get(f"{BASE_URL}/scenes/")
        if response.status_code != 200:
            print("‚ùå Server is not running. Please start the backend first:")
            print("   make run-backend")
            return
    except:
        print("‚ùå Cannot connect to server. Please start the backend first:")
        print("   make run-backend")
        return
    
    print("‚úÖ Server is running!")
    print()
    
    # Get available scenes
    scenes = get_scenes()
    if not scenes:
        print("‚ùå No scenes available.")
        return
    
    print("Available scenes:")
    for i, scene in enumerate(scenes, 1):
        print(f"{i}. {scene['title']}")
    
    # Get user choice
    try:
        choice = int(input("\nSelect scene (number): ")) - 1
        if 0 <= choice < len(scenes):
            scene = scenes[choice]
            scene_id = scene['id']
            
            # Get filename (optional)
            filename = input("Filename (press Enter for auto-generated): ").strip()
            if not filename:
                filename = None
            
            # Export the story
            result = export_story(scene_id, filename)
            if result:
                print(f"\nüéâ Story exported successfully!")
                print(f"üìÅ File: {result}")
            else:
                print("‚ùå Failed to export story")
        else:
            print("‚ùå Invalid scene selection")
    except ValueError:
        print("‚ùå Invalid input")
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")

if __name__ == "__main__":
    main() 